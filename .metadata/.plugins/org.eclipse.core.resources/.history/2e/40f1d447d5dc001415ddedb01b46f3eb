package guiview;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JButton;

import cs213.photoAlbum.model.Album;
import cs213.photoAlbum.model.Photo;

public class AlbumButton extends JButton implements Resizable {
	
	private static final long serialVersionUID = 1;
	
	private Album album;
	private BufferedImage keyPhoto;
	private int index;
	private static final int CORNER_RADIUS = 5;
	
	public AlbumButton(int index) {
		Dimension size = new Dimension(50, 50);
		setPreferredSize(size);
		this.index = index;
	}
	
	public void setAlbum(Album album) {
		if (album == null) return;

		this.album = album;
		Photo[] photos = album.getPhotos();
		if (photos.length > 0) {
			try {
				keyPhoto = ImageIO.read(new File(photos[0].getName()));
				setText("");
			} catch (IOException e) {
				setText("(Empty)");
			}
		} else {
			keyPhoto = null;
			setText("(Empty)");
		}
	}
	
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		if (keyPhoto != null) {
			BufferedImage cropped;
			if (keyPhoto.getWidth() > getWidth() || keyPhoto.getHeight() > getHeight()) {
				int offsetX = getWidth() / 2, offsetY = getHeight() / 2;
				int centerX = keyPhoto.getWidth() / 2, centerY = keyPhoto.getHeight() / 2;
				cropped = keyPhoto.getSubimage(centerX - offsetX, centerY - offsetY, centerX + offsetX, centerY + offsetY);
			} else {
				cropped = keyPhoto;
			}
			int croppedWidth = cropped.getWidth(), croppedHeight = cropped.getHeight();
			BufferedImage rounded = new BufferedImage(croppedWidth, croppedHeight, BufferedImage.TYPE_INT_ARGB);
			Graphics2D g2 = rounded.createGraphics();
			g2.setComposite(AlphaComposite.Src);
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g2.setColor(Color.WHITE);
			g2.fill(new RoundRectangle2D.Float(0, 0, w, h, CORNER_RADIUS, CORNER_RADIUS));
		}
	}
	
	public Album getAlbum() {
		return album;
	}
	
	public int getIndex() {
		return index;
	}
	
	public void resized(Dimension size) {
		int legSize = size.getHeight() > size.getWidth() ? (int) Math.floor(size.getWidth() / 3) : (int) Math.floor(size.getHeight() / 3);
		setPreferredSize(new Dimension(legSize, legSize));
	}

}
