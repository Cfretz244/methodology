package cs213.photoAlbum.control;

import java.io.File;

import cs213.photoAlbum.model.Album;
import cs213.photoAlbum.model.Backend;
import cs213.photoAlbum.model.Photo;
import cs213.photoAlbum.model.User;

/**
 * Class serves as a bridge between the View and Model. The view can call methods on the control object
 * to influence the model.
 * All method descriptions are provided in the PhotoSource interface.
 * 
 * @author Karan Kadaru
 */
public class Control implements PhotoSource {
	
	private String currentUserid;
	private User currentUser;

	@Override
	public void setCurrentUser(String userid) {
		currentUserid = userid;
	}
	
	@Override
	public boolean loadUserData() {
		if (currentUserid == null) return false;
		currentUser = Backend.loadUser(currentUserid);
		return currentUser != null;
	}
	
	@Override
	public boolean shutdown() {
		int e_count = 0;
		boolean status = Backend.writeUser(currentUser);
		while (!status) {
			if (++e_count > 5) return false;
			status = Backend.writeUser(currentUser);
		}
		return true;
	}

	@Override
	public boolean addUser(String userid, String name) {
		currentUserid = userid;
		if (Backend.loadUser(userid) == null) {
			currentUser = new User(name, userid);
			return true;
		} else {
			return false;
		}
	}

	@Override
	public boolean removeUser(String userid) {
		return Backend.deleteUser(userid);
	}

	@Override
	public boolean addAlbum(String album) {
		if (currentUser == null) return false;
		return currentUser.addAlbum(album);
	}

	@Override
	public boolean removeAlbum(String album) {
		if (currentUser == null) return false;
		return currentUser.removeAlbum(album);
	}

	@Override
	public boolean addPhotoToAlbum(String album, String name, String caption) {
		if (currentUser == null) return false;
		
		File photoFile = new File(name);
		if (!photoFile.exists()) return false;
		return currentUser.addPhotoToAlbum(name, photoFile.lastModified(), album);
	}

	@Override
	public boolean movePhoto(String fromAlbum, String toAlbum, String name) {
		if (currentUser == null) return false;
		
		Photo photo = currentUser.removePhotoFromAlbum(name, fromAlbum);
		if (photo == null) return false;
		return currentUser.addPhotoToAlbum(photo, toAlbum);
	}

	@Override
	public boolean removePhoto(String name) {
		if (currentUser == null) return false;
		
		return currentUser.removePhoto(name) != null;
	}

	@Override
	public boolean removePhotoFromAlbum(String album, String name) {
		if (currentUser == null) return false;
		
		return currentUser.removePhotoFromAlbum(name, album) != null;
	}

	@Override
	public boolean addTagToPhoto(String name, String tagType, String tagValue) {
		if (currentUser == null) return false;
		
		return currentUser.addTagToPhoto(name, tagType, tagValue);
	}

	@Override
	public boolean addTagToAlbum(String album, String tagType, String tagValue) {
		if (currentUser == null) return false;
		
		Photo[] photos = currentUser.getPhotos(album);
		for (Photo photo : photos) {
			currentUser.addTagToPhoto(photo.getName(), tagType, tagValue);
		}
		
		return true;
	}

	@Override
	public boolean removeTagFromPhoto(String name, String tagType) {
		if (currentUser == null) return false;
		
		return currentUser.removeTagFromPhoto(name, tagType);
	}

	@Override
	public boolean removeTagFromPhoto(String name, String tagType, String tagValue) {
		if (currentUser == null) return false;
		
		return currentUser.removeTagFromPhoto(name, tagType, tagValue);
	}

	@Override
	public boolean removeTagFromAlbum(String album, String tagType) {
		if (currentUser == null) return false;
		
		Photo[] photos = currentUser.getPhotos(album);
		for (Photo photo : photos) {
			currentUser.removeTagFromPhoto(photo.getName(), tagType);
		}
		
		return true;
	}

	@Override
	public boolean removeTagFromAlbum(String album, String tagType, String tagValue) {
		if (currentUser == null) return false;
		
		Photo[] photos = currentUser.getPhotos(album);
		for (Photo photo : photos) {
			currentUser.removeTagFromPhoto(photo.getName(), tagType, tagValue);
		}
		
		return true;
	}

	@Override
	public User getUser(String userid) {
		return Backend.loadUser(userid);
	}

	@Override
	public Album[] getAlbums() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Photo[] getPhotos() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Photo[] getPhotosFromAlbum(String album) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Photo[] getPhotosByDate(String start, String end) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Photo[] getPhotosByTag(String tagType, String tagValue) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getTagsForPhoto(String name) {
		// TODO Auto-generated method stub
		return null;
	}

}