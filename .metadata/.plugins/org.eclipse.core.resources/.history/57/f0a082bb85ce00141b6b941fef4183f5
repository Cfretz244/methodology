package pieces;

import java.util.ArrayList;

import chess.Color;
import chess.Location;

// Class is the parent class of all other pieces, and defines some base functionality.
public abstract class Piece {
	
	// Coordinates.
	protected int x, y;
	
	// Whether or not the piece has moved. Useful for castling.
	protected boolean hasMoved;

	// Whether the piece is white or black.
	protected Color team;
	
	// The rank of the piece ("p" for pawn, "R" for rook, "B" for bishop, etc).
	protected String rank;
	
	public Piece(int x, int y, Color team) {
		this.x = x;
		this.y = y;
		this.team = team;
		hasMoved = false;
	}
	
	// Abstract function must be overridden by all subclasses.
	// Concept of the function is to return all valid tiles that the given piece could move to if it were the only piece on the board.
	public abstract ArrayList<ArrayList<Location>> validMoves();
	
	public void moveTo(Location dest) {
		hasMoved = true;
		x = dest.x;
		y = dest.y;
	}
	
	@Override
	public String toString() {
		return team == Color.WHITE ? "w" + rank : "b" + rank;
	}
	
	public boolean hasMoved() {
		return hasMoved;
	}
	
	public Color getTeam() {
		return team;
	}
	
}
