package cs213.photoAlbum.guiview;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.function.Consumer;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;

import cs213.photoAlbum.model.Photo;

public class AddPanel extends JPanel implements ActionListener {

	private class ImageFilter extends FileFilter {

		public boolean accept(File file) {
			try {
				String path = file.getCanonicalPath();
				String ext = path.substring(path.lastIndexOf(".") + 1, path.length()).toLowerCase();
				return ext.equals("jpg") || ext.equals("png") || ext.equals("bmp") || ext.equals("gif") || ext.equals("jpeg") || ext.equals("tiff");
			} catch (Exception e) {
				return false;
			}
		}

		public String getDescription() {
			return "JPEG, PNG, BMP, GIF, and TIFF files";
		}

	}

	private static final long serialVersionUID = 1;
	private Photo photo;
	private JButton selectButton, addButton, cancelButton;
	private AlbumView.PlaceHolderField caption;
	private JLabel errorMessage;
	private JFileChooser chooser;
	private Consumer<String[]> addPhoto;
	private Consumer<String> updateUI;
	private Consumer<?> cancel;
	private File chosen;

	public AddPanel(Consumer<String[]> addPhoto, Consumer<String> updateUI, Consumer<?> cancel) {
		this.addPhoto = addPhoto;
		this.updateUI = updateUI;
		this.cancel = cancel;

		setLayout(new GridBagLayout());
		instantiate();
		bind();

		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridwidth = 2;
		add(selectButton, gbc);
		gbc.gridy = 1;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		add(caption, gbc);
		gbc = new GridBagConstraints();
		gbc.gridy = 2;
		add(cancelButton, gbc);
		gbc.gridx = 1;
		add(addButton, gbc);
		gbc = new GridBagConstraints();
		errorMessage.setVisible(false);
		gbc.gridy = 3;
		gbc.gridwidth = 2;
		add(errorMessage, gbc);
	}

	public void setPhoto(Photo photo) {
		this.photo = photo;
		selectButton.setEnabled(this.photo == null);
		caption.setText(this.photo != null ? photo.getCaption() : "");
	}

	private void instantiate() {
		selectButton = new JButton("Select Photo");
		addButton = new JButton("Submit");
		cancelButton = new JButton("Cancel");
		caption = new AlbumView.PlaceHolderField("Caption");
		errorMessage = new JLabel();
		errorMessage.setForeground(Color.RED);
		chooser = new JFileChooser();
		chooser.setFileFilter(new ImageFilter());
	}

	private void bind() {
		selectButton.addActionListener(this);
		addButton.addActionListener(this);
		cancelButton.addActionListener(this);
	}

	public void actionPerformed(ActionEvent event) {
		JButton button = (JButton) event.getSource();
		if (button == addButton) {
			if (photo == null) {
				try {
					if (chosen != null && caption.getText() != "") {
						File temp = chosen;
						chosen = null;
						errorMessage.setVisible(false);
						addPhoto.accept(new String[] {temp.getCanonicalPath(), caption.getText()});
					} else {
						errorMessage.setText("Please fill all fields.");
						errorMessage.setVisible(true);
					}
				} catch (IOException e) {
					errorMessage.setText("An error occured while loading the path to the photo.");
					errorMessage.setVisible(true);
				}
			} else {
				if (caption.getText() != "") {
					errorMessage.setVisible(false);
					addPhoto.accept(new String[] {null, caption.getText()});
				} else {
					errorMessage.setText("Please enter a caption.");
					errorMessage.setVisible(true);
				}
			}
		} else if (button == selectButton) {
			int returnVal = chooser.showOpenDialog(this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				chosen = chooser.getSelectedFile();
				try {
					updateUI.accept(chosen.getCanonicalPath());
				} catch (IOException e) {
					// Should never happen.
				}
			}
		} else {
			photo = null;
			chosen = null;
			cancel.accept(null);
		}
	}

}
