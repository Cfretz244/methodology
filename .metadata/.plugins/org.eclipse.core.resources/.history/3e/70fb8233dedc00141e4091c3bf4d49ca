package guiview;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JButton;

import cs213.photoAlbum.model.Album;
import cs213.photoAlbum.model.Photo;

public class AlbumButton extends JButton implements Resizable {

	private static final long serialVersionUID = 1;

	private Album album;
	private BufferedImage keyPhoto, defaultPhoto;
	private int index;
	private boolean selected;
	private static final int CORNER_RADIUS = 80;
	private static final double PADDING = 0.75;

	public AlbumButton(int index) {
		Dimension size = new Dimension(50, 50);
		setPreferredSize(size);
		this.index = index;
		selected = false;
		try {
			defaultPhoto = ImageIO.read(new File("assets/404.png"));
		} catch (IOException e) {
			defaultPhoto = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
			Graphics2D g = defaultPhoto.createGraphics();
			g.drawString("Photo Not Found", getWidth(), getHeight());
			g.dispose();
		}
	}

	public void setAlbum(Album album) {
		if (album == null) return;

		this.album = album;
		Photo[] photos = album.getPhotos();
		if (photos.length > 0) {
			try {
				keyPhoto = ImageIO.read(new File(photos[0].getName()));
				setText("");
			} catch (IOException e) {
				keyPhoto = defaultPhoto;
			}
		} else {
			keyPhoto = defaultPhoto;
		}
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		if (keyPhoto == null) keyPhoto = defaultPhoto;

		BufferedImage cropped;
		if ((keyPhoto.getWidth() > getWidth() || keyPhoto.getHeight() > getHeight()) && keyPhoto != defaultPhoto) {
			int offsetX = getWidth() / 2, offsetY = getHeight() / 2;
			int centerX = keyPhoto.getWidth() / 2, centerY = keyPhoto.getHeight() / 2;
			cropped = keyPhoto.getSubimage(centerX - offsetX, centerY - offsetY, centerX + offsetX, centerY + offsetY);
		} else {
			cropped = keyPhoto;
		}

		int croppedWidth = cropped.getWidth(), croppedHeight = cropped.getHeight();
		BufferedImage rounded = new BufferedImage(croppedWidth, croppedHeight, BufferedImage.TYPE_INT_ARGB);
		Graphics2D g2 = rounded.createGraphics();
		g2.setComposite(AlphaComposite.Src);
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2.setColor(Color.WHITE);
		g2.fill(new RoundRectangle2D.Float(0, 0, croppedWidth, croppedHeight, CORNER_RADIUS, CORNER_RADIUS));
		g2.setComposite(AlphaComposite.SrcAtop);
		g2.drawImage(cropped, 0, 0, null);
		g2.dispose();
		
		if (selected) {
			GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
			GraphicsDevice graphicsDevice = graphicsEnvironment.getDefaultScreenDevice();
			GraphicsConfiguration graphicsConfiguration = graphicsDevice.getDefaultConfiguration();
			BufferedImage blurred = graphicsConfiguration.createCompatibleImage(rounded.getWidth(null), rounded.getHeight(null), Transparency.BITMASK);
			Graphics graphics = rounded.createGraphics();
			Kernel kernel = new Kernel(3, 3, new float[] {
				1f / 9f, 1f / 9f, 1f / 9f,
				1f / 9f, 1f / 9f, 1f / 9f,
				1f / 9f, 1f / 9f, 1f / 9f
			});
			BufferedImageOp op = new ConvolveOp(kernel);
			BufferedImage blurred = op.filter(rounded, null);
			g.drawImage(blurred, 0, 0, getWidth(), getHeight(), null);
		} else {
			g.drawImage(rounded, 0, 0, getWidth(), getHeight(), null);
		}

	}

	public Album getAlbum() {
		return album;
	}

	public int getIndex() {
		return index;
	}
	
	public void select() {
		selected = !selected;
		repaint();
	}

	public void resized(Dimension size) {
		double legSize = size.getHeight() > size.getWidth() ? size.getWidth() / 3 : size.getHeight() / 3;
		legSize *= PADDING;
		setPreferredSize(new Dimension((int) legSize, (int) legSize));
	}

}
