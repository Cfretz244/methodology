package cs213.photoAlbum.model;

import java.io.Serializable;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

/**
 * Class represents an individual photo album for a user. It keeps track of all of its photos, and 
 * maintains several different tables of photos allowing efficient access.
 * 
 * @author Chris Fretz
 */
public class Album implements Serializable {
	
	private String name;
	private Map<String, Photo> photos;
	private Map<String, Set<Photo>> tags;
	private SortedSet<Photo> dates;
	private static final long serialVersionUID = 1;
	
	/*----- Constructors -----*/
	
	/**
	 * Public constructor for Album. Takes a name and initializes an album object.
	 * 
	 * @param name The name of the album.
	 */
	public Album(String name) {
		this.name = name;
		
		photos = new HashMap<String, Photo>();
		tags = new HashMap<String, Set<Photo>>();
		dates = new TreeSet<Photo>();
	}
	
	/*----- Protected Setters/Mutators -----*/
	
	/**
	 * Method adds a photo to the album.
	 * 
	 * @param photo Photo to be added.
	 * @return Status of operation.
	 */
	protected boolean addPhoto(Photo photo) {
		if (photos.containsKey(photo.getName())) return false;
		
		photos.put(photo.getName(), photo);
		dates.add(photo);
		
		String[] allTags = photo.getTags();
		for (String tag : allTags) {
			String type = tag.substring(0, tag.indexOf(":"));
			Set<Photo> category = tags.get(type);
			if (category == null) {
				category = new HashSet<Photo>();
				tags.put(type, category);
			}
			category.add(photo);
		}
		
		return true;
	}
	
	/**
	 * Method removes a photo from the album.
	 * 
	 * @param photo Name of photo to be removed.
	 * @return The photo that was removed.
	 */
	protected Photo removePhoto(String name) {
		Photo photo = photos.remove(name);
		if (photo == null) return null;
		
		dates.remove(photo);
		String[] allTags = photo.getTags();
		for (String tag: allTags) {
			String type = tag.substring(0, tag.indexOf(":"));
			tags.get(type).remove(photo);
		}
		
		return photo;
	}
	
	/**
	 * Method is called upon the album object when the tag of a photo has changed so that the album
	 * can update its state to reflect the fact.
	 * 
	 * @param photo The photo object whose tags have changed.
	 */
	protected void tagsChanged(Photo photo) {
		Set<String> update = new HashSet<String>();
		
		String[] allTags = photo.getTags();
		for(String tag : allTags) {
			String type = tag.substring(0,  tag.indexOf(":"));
			update.add(type);
		}
		
		Iterator<String> iterate = tags.keySet().iterator();
		while (iterate.hasNext()) {
			String type = iterate.next();
			if (update.contains(type)) {
				tags.get(type).add(photo);
			} else {
				tags.get(type).remove(photo);
			}
			update.remove(type);
		}
		
		iterate = update.iterator();
		while (iterate.hasNext()) {
			String type = iterate.next();
			Set<Photo> category = new HashSet<Photo>();
			category.add(photo);
			tags.put(type, category);
		}
	}
	
	/*----- Public Getters -----*/
	
	/**
	 * Returns the name of the album.
	 * 
	 * @return The name.
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * Returns an array of the photos the album contains.
	 * 
	 * @return An array of the photos.
	 */
	public Photo[] getPhotos() {
		Photo[] allPhotos = new Photo[photos.size()];
		photos.values().toArray(allPhotos);
		return allPhotos;
	}
	
	/**
	 * Returns an array of photos that have the given tag.
	 * 
	 * @param tagType The type of the tag.
	 * @param tagValue The value of the tag.
	 * @return An array of photos that have the given tag.
	 */
	public Photo[] getPhotos(String tagType, String tagValue) {
		Set<Photo> category = tags.get(tagType), results = new HashSet<Photos>();

		Iterator<Photo> iterate = category.iterator();
		while(iterate.hasNext()) {
			
		}
	}
	
	/**
	 * Returns an array of photos within the given time range.
	 * 
	 * @param startDate The starting date.
	 * @param endDate The ending date.
	 * @return An array of photos within the given dates.
	 */
	public Photo[] getPhotos(long startDate, long endDate) {
		// Implementation...
		return null;
	}

}