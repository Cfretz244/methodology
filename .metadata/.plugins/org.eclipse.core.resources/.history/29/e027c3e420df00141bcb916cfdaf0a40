package cs213.photoAlbum.guiview;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

import javax.swing.JPanel;
import javax.swing.border.LineBorder;

import cs213.photoAlbum.model.Drawable;

public class PhotoPanel extends JPanel {

	private static final long serialVersionUID = 1;
	private List<PhotoButton> buttons;
	private Supplier<Drawable[]> updater;

	public PhotoPanel(ActionListener listener, Supplier<Drawable[]> updater) {
		this.updater = updater;
		setLayout(new GridBagLayout());
		setBorder(new LineBorder(Color.black, 2, true));
		buttons = new ArrayList<PhotoButton>();

		GridBagConstraints constraints = new GridBagConstraints();
		constraints.weightx = 0.3;
		constraints.weighty = 0.3;
		constraints.insets = new Insets(10, 10, 10, 10);
		for (int i = 0; i < 3; i++) {
			constraints.gridy = i;
			for (int j = 0; j < 3; j++) {
				constraints.gridx = j;
				PhotoButton button = new PhotoButton((3 * i) + j);
				button.addActionListener(listener);
				buttons.add(button);
				add(button, constraints);
			}
		}
		updatePhotos();
	}
	
	public void updatePhotos() {
		Drawable[] data = updater.get();
		int index = 0;
		for (; index < data.length; index++) {
			Drawable current = data[index];
			buttons.get(index).setDrawable(current);
		}
		for (; index < 9; index++) buttons.get(index).setDrawable(null);
		repaint();
	}
	
	public void enable() {
		for (PhotoButton button : buttons) button.setEnabled(true);
	}
	
	public void disable() {
		for (PhotoButton button : buttons) button.setEnabled(false);
	}

	public PhotoButton getButton(int index) {
		return buttons.get(index);
	}

	public void resized(Dimension size) {
		for (PhotoButton button : buttons) button.resized(size);
	}

}
